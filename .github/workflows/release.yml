name: Build and Release

on:
  push:
    tags:
      - 'v*' # Only trigger on tags like v1.0.0

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch:
          - amd64
          - arm64
          - arm
          - '386'
          - loong64
          - riscv64
      exclude:
        - os: macos-latest
          arch: arm # macOS does not support arm
        - os: macos-latest
          arch: loong64 # macOS does not support loong64
        - os: macos-latest
          arch: riscv64 # macOS does not support riscv64
        - os: windows-latest
          arch: loong64 # Windows does not support loong64
        - os: windows-latest
          arch: riscv64 # Windows does not support riscv64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20' # Specify the Go version

      - name: Build binaries
        env:
          GOARCH: ${{ matrix.arch }}
          GOOS: ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'darwin' || 'windows' }}
        run: |
          output_dir="dist/${{ matrix.os }}_${{ matrix.arch }}"
          mkdir -p "$output_dir"
          go build -o "$output_dir/jwt_tool" .

      - name: Archive binaries
        if: always()
        run: |
          cd dist
          zip -r "${{ matrix.os }}_${{ matrix.arch }}.zip" "${{ matrix.os }}_${{ matrix.arch }}"

      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}_${{ matrix.arch }}
          path: dist/${{ matrix.os }}_${{ matrix.arch }}.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create Release
        id: release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            **Automated Release**
            - Version: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          name: ${{ matrix.os }}_${{ matrix.arch }}.zip
          release_id: ${{ steps.release.outputs.id }}
          asset_path: dist/${{ matrix.os }}_${{ matrix.arch }}.zip
          asset_content_type: application/zip

